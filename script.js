  
// рдорд░рд╛рдареА рдпреБрдирд┐рдЯреНрд╕
const units = ["рдХрд┐рд▓реЛ", "рдЧреНрд░реЕрдо", "рд▓рд┐рдЯрд░", "рддреЛрд│рд╛", "рдирдЧ", "рдкрд╛рдХреАрдЯ"];

// рдХреЕрдЯреЗрдЧрд░реАрдЬ рд╡ рдЖрдпрдЯрдореНрд╕
const categories = {

  "рдбрд╛рд│реА / рдХрдбрдзрд╛рдиреНрдп": [
    "рддреВрд░ рдбрд╛рд│",
    "рдореВрдЧ рдбрд╛рд│",
    "рдорд╕реВрд░ рдбрд╛рд│",
    "рдЪрдирд╛ рдбрд╛рд│",
    "рдЙрдбреАрдж рдбрд╛рд│",
    "рд╣рд┐рд░рд╡реЗ рдореВрдЧ",
    "рдордЯрдХреА (рдЧрд╛рд╡рд░рд╛рдг)",
    "рдЪрдгреЗ",
    "рдХрд╛рдмреБрд▓реА рдЪрдгреЗ",
    "рдЪрд╡рд│реА",
    "рд╕рдлреЗрдж рд╡рд╛рдЯрд╛рдгреЗ",
    "рдХрд╛рд│реЗ рд╡рд╛рдЯрд╛рдгреЗ (рдЧреЛрдЯреЗ рдЧрд╛рд╡рдЪреЗ)",
    "рд╕рд╛рдмреБрджрд╛рдгрд╛",
    "рд╢реЗрдВрдЧрджрд╛рдгреЗ",
    "рд╕реЛрдпрд╛рдмреАрди рд╡рдбреА",
    "рдХреБрд│реАрде",
    "рд░рд╛рдЬрдорд╛"
  ],
  "рдзрд╛рдиреНрдп рд╡ рдкреАрда": [
    "рддрд╛рдВрджреВрд│ (рд╕реБрд░рддреА рдХреЛрд▓рдо)",
    "рддрд╛рдВрджреВрд│ (рдмрд╛рд╕рдорддреА)",
    "рдЗрдбрд▓реА рддрд╛рдВрджреВрд│",
    "рдЧрд╣реВ",
    "рдЬреНрд╡рд╛рд░реА",
    "рдмрд╛рдЬрд░реА",
    "рдирд╛рдЪрдгреА",
    "рдкреЛрд╣реЗ",
    "рд░рд╡рд╛",
    "рдореИрджрд╛",
    "рддрд╛рдВрджрд│рд╛рдЪреА рдореЛрджрдХ рдкрд┐рдареА",
    "рдмреЗрд╕рди",
    "рд╕рд╛рдЦрд░",
    "рдЧреВрд│",
    "рдЪрд╣рд╛ рдкрд╛рдКрдбрд░",
    "рдХреЙрдлреА",
    "рдУрдЯреНрд╕"
  ],
  "рдорд╕рд╛рд▓реЗ рд╡ рд╕реБрдХреА рд╕рд╛рдордЧреНрд░реА": [
    "рдореАрда",
    "рд╣рд│рдж рдкрд╛рд╡рдбрд░",
    "рдХрд╛рд╢реНрдорд┐рд░реА рдорд┐рд░рдЪреА рдкрд╛рд╡рдбрд░",
    "рд╣рд┐рдВрдЧ",
    "рдЬрд┐рд░реЗ",
    "рдореЛрд╣рд░реА",
    "рдореЗрдереАрджрд╛рдгреЗ",
    "рдзрдгреЗ",
    "рд╣рд┐рд░рд╡реА рд╡реЗрд▓рдЪреА",
    "рдмрдбреАрд╢реЗрдк",
    "рд▓рд╡рдВрдЧ",
    "рджрд╛рд▓рдЪрд┐рдиреА",
    "рддреЗрдЬрдкрддреНрддрд╛",
    "рд╢рд╛рд╣реА рдЬрд┐рд░",
    "рдорд╕рд╛рд▓рд╛ рд╡реЗрд▓рдЪреА",
    "рджрдЧрдбрдлреВрд▓",
    "рдЪрдХреНрд░реАрдлреВрд▓",
    "рдзрдгрд╛ рдкрд╛рд╡рдбрд░",
    "рдЪрд╛рдЯ рдорд╕рд╛рд▓рд╛",
    "рдХрд┐рдЪрди рдХрд┐рдВрдЧ рдорд╕рд╛рд▓рд╛",
    "рд╕рд╛рдВрдмрд╛рд░ рдорд╕рд╛рд▓рд╛",
    "рдмрд┐рд░реНрдпрд╛рдгреА рдорд╕рд╛рд▓рд╛",
    "рдЪрд┐рдХрди рдорд╕рд╛рд▓рд╛",
    "рдкрд╛рд╡рднрд╛рдЬреА рдорд╕рд╛рд▓рд╛",
    "рдЫреЛрд▓реЗ рдорд╕рд╛рд▓рд╛",
    "рддрдВрджреБрд░реА рдорд╕рд╛рд▓рд╛"
  ],

  "рддреЗрд▓ рд╡ рддреВрдк": [
    "рдлреЙрд░реНрдЪреНрдпреВрди рд░рд╛рдЗрд╕ рдмреНрд░рд╛рди рддреЗрд▓",
    "рдореЛрд╣рд░реА рддреЗрд▓",
    "рддреВрдк",
    "рдордз"
  ],
 "рдбреНрд░рд╛рдпрдлреНрд░реБрдЯреНрд╕": [
    "рдХрд╛рдЬреВ",
    "рдмрджрд╛рдо",
    "рдЕрдХреНрд░реЛрдб",
    "рдЦрдЬреВрд░",
    "рдкрд┐рд╕реНрддреЗ",
    "рдордиреБрдХреЗ",
    "рдХрд╛рд│реЗ рдордиреБрдХреЗ",
    "рдЖрд╡рд│рд╛ рдХреЕрдиреНрдбреА",
    "рдХреЗрд╕рд░",
    "рдорд╕рд╛рд▓рд╛ рджреВрдз рдкрд╛рдКрдбрд░ (рдПрд╡рд░реЗрд╕реНрдЯ)"
  ],
  "рдмрд┐рд╕рдХрд┐рдЯ / рд╕реНрдиреЕрдХреНрд╕": [
    "рдкрд╛рд░реНрд▓реЗ",
    "рдорд╛рд░реА рдЧреЛрд▓реНрдб",
    "рд╡реАрдЯ рдорд╛рд░реА",
    "рдХреНрд░реЕрдХ рдЬреЕрдХ",
    "рдирд╛рдЗрд╕",
    "рдУрд░рд┐рдУ",
    "рдиреНрдпреВрдЯреНрд░реАрдЪреЙрдИрд╕",
    "рдореЛрдиреЕрдХреЛ",
    "рднрд╛рдЬрд▓реЗрд▓реЗ рдЪрдгреЗ",
    "рднрд╛рдЬрд▓реЗрд▓реЗ рд╢реЗрдВрдЧрджрд╛рдгреЗ",
    "рдЪрдХрд▓реА рддреБрдХрдбрд╛",
    "рдмрдЯрд╛рдЯрд╛ рд╕рд│реА",
    "рдмрдЯрд╛рдЯрд╛ рдЪрд┐рд╡рдбрд╛",
    "рдлрд░рд╕рд╛рдг",
    "рдирд╛рдпрд▓реЙрди рд╢реЗрд╡"
  ],
  "рд╕реЙрд╕реЗрд╕ / рдЪрдЯрдгреА": [
    "рдЯреЛрдореЕрдЯреЛ рдХреЗрдЪрдк",
    "рд╢реЗрдЬрд╡рд╛рди рдЪрдЯрдгреА",
    "рдордпреЛрдиреАрдЬ",
    "рдЪрд┐рд▓реА рдлреНрд▓реЗрдХреНрд╕",
    "рдСрд░реАрдЧреЕрдиреЛ",
    "рдЪрд┐рд▓реА рд╕реЙрд╕",
    "рд╡рд┐рдиреЗрдЧрд░",
    "рд▓рд┐рдХреНрд╡рд┐рдб рдлреВрдб рдХрд▓рд░",
    "рд╡рдиреАрд▓рд╛ рдПрд╕реЗрдВрд╕"
  ],
  "рдмреЗрдХрд░реАрдЪреЗ рдкрджрд╛рд░реНрде": [
    "рдЯреЛрд╕реНрдЯ",
    "рдЦрд╛рд░реА",
    "рдЬреАрд░рд╛ рдмрдЯрд░",
    "рд▓рд╛рджреА рдкрд╛рд╡",
    "рдмреНрд░реЗрдб",
    "рдирд╛рдирдХрдЯрд╛рдИ",
    "рдХрдк рдХреЗрдХ"
  ],
    "рдлреНрд░реАрдЬ рдордзрд▓реЗ рдкрджрд╛рд░реНрде": [
    "рджреВрдз",
    "рджрд╣реА",
    "рддрд╛рдХ",
    "рдкрдиреАрд░",
    "рдЪреАрдЬ (рдореЛрдЭрд╛рд░реЗрд▓рд╛, рдЪреЗрдбрд░, рдлреЗрдЯрд╛)",
    "рдЖрдИрд╕реНрдХреНрд░реАрдо",
    "рд╕рд░рдмрдд"
  ],
  "рдкреВрдЬреЗрдЪреЗ рд╕рд╛рд╣рд┐рддреНрдп": [
    "рдЕрдЧрд░рдмрддреНрддреА",
    "рдХрд╛рдкреВрд░ рд╡рдбреА",
    "рдзреВрдк",
    "рджрд┐рд╡реНрдпрд╛рдЪ рддреЗрд▓",
    "рджрд┐рд╡реНрдпрд╛рдЪ рддреВрдк",
    "рд╢реЗрдгреА",
    "рдЕрд╖реНрдЯрдЧрдВрдз",
    "рдорд╛рдЪрд┐рд╕ рдмреЙрдХреНрд╕",
    "рдХрд╛рдкрд╕рд╛рдЪреНрдпрд╛ рд▓рд╛рдВрдм рд╡рд╛рддреА",
    "рдХрд╛рдкреВрд╕",
    "рдЧреЛрдореВрддреНрд░",
    "рд╣рд│рдж рдкрд╛рдКрдбрд░",
    "рдХреБрдВрдХреВ рдкрд╛рдКрдбрд░",
    "рдЕрднреАрд░ рдкрд╛рдКрдбрд░",
    "рдЧреБрд▓рд╛рд▓ рдкрд╛рдКрдбрд░",
    "рдЕрддреНрддрд░",
    "рдЖрд╕рди рдХрдкрдбрд╛",
    "рднрд┐рдорд╛рд╕реЗрдиреА рдХрд╛рдкреБрд░",
    "рдЧреБрдЧрд▓ рдзреВрдк",
    "рд╕реБрдкрд╛рд░реА",
    "рдХрд░рдВрдбрд╛-рдлрдгреА"
  ],
 
  "рд╕реНрд╡рдЪреНрдЫрддрд╛ рд╕рд╛рд╣рд┐рддреНрдп": [
    "рд╕рдВрддреВрд░ рд╕рд╛рдмрдг",
    "рдореЗрдбреАрдорд┐рдХреНрд╕ рд╕рд╛рдмрдг",
    "рд╕рд┐рдиреНрдереЕрд▓ рд╕рд╛рдмрдг",
    "рдХреНрд▓рд┐рдирд┐рдХрдкреНрд▓рд╕ рд╢реИрдореНрдкреВ",
    "рд╕рд░реНрдлрдПрдХреНрд╕реЗрд▓ рдИрдЭреА рд╡реЙрд╢ рдкрд╛рдКрдбрд░",
    "рд╕рд░реНрдлрдПрдХреНрд╕реЗрд▓ рдХреНрд╡рд┐рдХ рд╡реЙрд╢ рдкрд╛рдКрдбрд░",
    "рд╕рд░реНрдлрдПрдХреНрд╕реЗрд▓ рдмрд╛рд░",
    "рдХрдореНрдлрд░реНрдЯ рд▓рд┐рдХреНрд╡рд┐рдб",
    "рд╣рд╛рд░реНрдкрд┐рдХ рдЯреЙрдпрд▓реЗрдЯ",
    "рд╣рд╛рд░реНрдкрд┐рдХ рдмрд╛рдерд░реВрдо",
    "рд▓рд╛рдпрдЭреЛрд▓ рдлреНрд▓реЛрд░ рдХреНрд▓реАрдирд░",
    "рдЖрд▓рд╛ рдлреЕрдмреНрд░рд┐рдХ рдХреНрд▓реАрдирд░",
    "рд╡реЕрдирд┐рд╢ рдкрд╛рдКрдбрд░",
    "рд╡рд┐рдо рд▓рд┐рдХреНрд╡рд┐рдб",
    "рд╡рд┐рдо рдмрд╛рд░",
    "рд╕реНрдХреЙрдЪ рдмреНрд░рд╛рдИрдЯ рд╕реНрдХреНрд░рдм",
    "рддрд╛рд░реЗрдЪрд╛ рдХрд╛рдерд╛",
    "рдирд╛рдпрд▓реЙрди рдХрд╛рдерд╛",
    "рдЯреВрдердкреЗрд╕реНрдЯ",
    "рдЯреБрдердмреНрд░рд╢",
    "рд░реЗрдЭрд░",
    "рдмреНрд▓реЗрдб",
    "рд╢реЗрд╡рд┐рдВрдЧ рдХреНрд░реАрдо",
    "рдореЗрдиреНрд╕ рдлреЗрд╕рд╡реЙрд╢",
    "рд▓реЗрдбрд┐рдЬ рдлреЗрд╕рд╡реЙрд╢",
    "рдиреЕрдкрдерд▓рд┐рди рдмреЙрд▓реНрд╕ (рдбрд╛рдВрдмрд░ рдЧреЛрд│реА)",
    "рдУрдбреЛрдирд┐рд▓ рд░реВрдо рдлреНрд░реЗрд╢рдиреЗрд░",
    "рд╣рд╛рд░реНрдкрд┐рдХ рдбреНрд░рд╛рдИрди рдХреНрд▓реАрдирд░",
    "рд╡реЙрд╢рд┐рдВрдЧрдорд╢реАрди рдХреНрд▓реАрдирд░",
    "рдЭрд╛рдбреВ",
    "рдмрд╛рдерд░реВрдо рдмреНрд░рд╢",
    "рдмрд╛рдерд░реВрдо рдЭрд╛рдбреВ",
    "рдЯрд┐рд╢реНрдпреВ рдкреЗрдкрд░",
    "рдкреЗрдкрд░ рдлреЙрдИрд▓"
  ]  
    };
let groceries = JSON.parse(localStorage.getItem("groceries")) || {};

function renderLists() {
  const container = document.getElementById("lists");
  //

  for (let category in categories) {
    container.innerHTML += `<h2># ${category}</h2>`;
    let table = `<table><thead><tr><th>рдЖрдпрдЯрдо</th><th>рдкреНрд░рдорд╛рдг</th><th>рдорд╛рдкрди</th></tr></thead><tbody>`;

    categories[category].forEach(item => {
      const entry = (groceries[category] && groceries[category][item]) || { qty: "", unit: "" };
      let options = units.map(u =>
        `<option value="${u}" ${entry.unit === u ? "selected" : ""}>${u}</option>`
      ).join("");

      table += `
        <tr>
        <td>${item}</td>
          <td><input type="number" min="1" value="${entry.qty}"onchange="updateQuantity('${category}','${item}', this.value)" /></td>
          <td>
            <select onchange="updateUnit('${category}','${item}', this.value)">
              <option value=""> </option>
              ${options}
            </select>
          </td>
        </tr>`;
    });

    table += `</tbody></table>`;
    container.innerHTML += table;
  }
}

function refreshList() {
  if (confirm("рдирдХреНрдХреА ? рдЖрдзреАрдЪреА рд╕рдВрдкреВрд░реНрдг рд▓рд┐рд╕реНрдЯ рдорд┐рдЯрд╡рд▓реА рдЬрд╛рдИрд▓.")) {
    localStorage.removeItem("groceries"); // clear storage
    groceries = {}; // reset variable
    renderLists();  // reload fresh list
    document.getElementById("summary").innerHTML = ""; // summary рд╕рд╛рдл
  }
}

    function updateQuantity(category, item, qty) {
  if (qty < 1) {
    alert("тЪая╕П рдкреНрд░рдорд╛рдг рд╢реВрдиреНрдп рдХрд┐рдВрд╡рд╛ рдирд┐рдЧреЗрдЯрд┐рд╡реНрд╣ рдЕрд╕реВ рд╢рдХрдд рдирд╛рд╣реА.");
    return;
  }
  if (!groceries[category]) groceries[category] = {};
  groceries[category][item] = groceries[category][item] || { qty: "", unit: "" };
  groceries[category][item].qty = qty;
  localStorage.setItem("groceries", JSON.stringify(groceries));
}

    function updateUnit(category, item, unit) {
      if (!groceries[category]) groceries[category] = {};
      groceries[category][item] = groceries[category][item] || { qty: "", unit: "" };
      groceries[category][item].unit = unit;
      localStorage.setItem("groceries", JSON.stringify(groceries));
    }

    // Build summary only with entered values
    function buildSummary() {
  const summary = document.getElementById("summary");
  summary.innerHTML = ""; // рд╕реБрд░реБрд╡рд╛рддреАрд▓рд╛ рд╕рд╛рдл рдХрд░рд╛

  let hasError = false;
  // let finalHTML = "<h1>ЁЯЫТ рдХрд┐рд░рд╛рдгрд╛ рд╕рд╛рдорд╛рдирд╛рдЪреА рдпрд╛рджреА</h1>";
const today = new Date();
const options = { weekday: "long", year: "numeric", month: "long", day: "numeric" };
const formattedDate = today.toLocaleDateString("mr-IN", options);

let finalHTML = `<h1>ЁЯЫТ рдХрд┐рд░рд╛рдгрд╛ рд╕рд╛рдорд╛рдирд╛рдЪреА рдпрд╛рджреА</h1>
<p style="font-size:18px; color:grey;">ЁЯУЕ рдпрд╛рджреА рддрдпрд╛рд░ рдЭрд╛рд▓реНрдпрд╛рдЪреА рддрд╛рд░реАрдЦ: ${formattedDate}</p>`;

  for (let category in categories) {
    let itemsAdded = false;
    let listHTML = `<h2>${category}</h2><ul>`;

    categories[category].forEach(item => {
      const entry = groceries[category] && groceries[category][item];

      // input рдЖрдгрд┐ select elements рд╢реЛрдзрд╛
      const qtyInput = document.querySelector(
        `input[onchange="updateQuantity('${category}','${item}', this.value)"]`
      );
      const unitSelect = document.querySelector(
        `select[onchange="updateUnit('${category}','${item}', this.value)"]`
      );

      // рдЬреБрдиреНрдпрд╛ error classes рдХрд╛рдвреВрди рдЯрд╛рдХрд╛
      if (qtyInput) qtyInput.classList.remove("error");
      if (unitSelect) unitSelect.classList.remove("error");

      if (entry && (entry.qty || entry.unit)) {
        if (!entry.qty) {
          if (qtyInput) qtyInput.classList.add("error");
          hasError = true;
        }
        if (!entry.unit) {
          if (unitSelect) unitSelect.classList.add("error");
          hasError = true;
        }

        if (entry.qty && entry.unit) {
          listHTML += `<li>${item} : ${entry.qty} ${entry.unit}</li>`;
          itemsAdded = true;
        }
      }
    });

    listHTML += "</ul>";
    if (itemsAdded) finalHTML += listHTML;
  }

  // рдЬрд░ рдПрд░рд░ рдЕрд╕реЗрд▓ рддрд░ summary рдЕрдЬрд┐рдмрд╛рдд рддрдпрд╛рд░ рдХрд░реВ рдирдпреЗ
  if (hasError) {
    summary.innerHTML = ""; 
    return false;
  }

summary.innerHTML = `<div style="text-align:center; font-family: 'Arial', 'Mukta', sans-serif;">${finalHTML}</div>`;
  return true;
}
    // Save only values as Image
function saveImage() {
  if (!buildSummary()) {
    alert("тЪая╕П рдХреГрдкрдпрд╛ рд▓рд╛рд▓ рдЭрд╛рд▓реЗрд▓реНрдпрд╛ рд░рд┐рдХрд╛рдореНрдпрд╛ рдЬрд╛рдЧреА рдпреЛрдЧреНрдп рдкреНрд░рдорд╛рдг / рдорд╛рдкрди рднрд░рд╛.");
    return; // stop if any field is missing
  }

  const summaryDiv = document.getElementById("summary");
  summaryDiv.style.display = "block";

  html2canvas(summaryDiv, { scale: 2 }).then(canvas => {
    const link = document.createElement("a");
    link.download = "grocery-list.png";
    link.href = canvas.toDataURL("image/png");
    link.click();
    summaryDiv.style.display = "none";
  });
}


    renderLists();
